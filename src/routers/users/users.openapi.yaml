paths:
  /users/{uid}:
    get:
      tags:
        - User
      summary: Get User details by ID
      operationId: GetUserById
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User fetched successfully"
                  payload:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    patch:
      tags:
        - User
      summary: Update User details by ID
      operationId: UpdateUserById
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserForm"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
                  payload:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      tags:
        - User
      summary: Delete User by ID
      operationId: DeleteUserById
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: User ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
                  payload:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /users:
    get:
      tags:
        - User
      summary: Get users List
      operationId: GetUsers
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 10
          description: Number of items to return
        - in: query
          name: search
          schema:
            type: string
          description: Search query
        - in: query
          name: sortBy
          schema:
            type: string
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: Sort order
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "users fetched successfully"
                  payload:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
                      total:
                        type: integer
                        example: 1
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /users/add:
    put:
      tags:
        - User
      summary: Add User
      operationId: AddUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserForm"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User added successfully"
                  payload:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        full_name:
          type: string
          description: Full Name
          example: John Doe
        email:
          type: string
          description: Email
          example: "sample@mail.com"
        phone:
          type: string
          description: Phone
          example: "1234567890"
        role:
          $ref: "#/components/schemas/UserRoleEnum"
        department:
          $ref: "#/components/schemas/Department"
        createdAt:
          type: string
          format: date-time
          description: Date of creation
          example: "2021-08-10T09:00:00Z"
        district_id:
          type: string
          description: District ID
          example: "123"
        district_name_en:
          type: string
          description: District Name in English
          example: "Raipur"
        district_name_hi:
          type: string
          description: District Name in Hindi
          example: "रायपुर"
      required:
        - id
        - email
        - role
        - createdAt

    UserRoleEnum:
      type: string
      description: Role of the user
      enum:
        - user
        - admin
        - super_admin

    AddUserForm:
      type: object
      properties:
        email:
          type: string
          example: "sample@mail.com"
          default: "sample@mail.com"
          description: Email of the user
        role:
          type: string
          example: "user"
          default: "user"
          description: Role of the user (user/admin)
          required: true
        department:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
          default: "123e4567-e89b-12d3-a456-426614174000"
          description: Department ID
          required: true
        pass:
          type: string
          example: "password"
          default: "password"
          description: Password of the user
          required: true
        full_name:
          type: string
          example: "John Doe"
          default: "John Doe"
          description: Full Name of the user
        phone:
          type: string
          example: "1234567890"
          default: "1234567890"
          description: Phone number of the user
        district_id:
          type: integer
          example: 123
          default: 123
          description: District ID of the user
          required: true
        district_name_en:
          type: string
          example: "Raipur"
          default: "Raipur"
          description: District Name in English
          required: true
        district_name_hi:
          type: string
          example: "रायपुर"
          default: "रायपुर"
          description: District Name in Hindi
          required: true

    UpdateUserForm:
      type: object
      properties:
        email:
          type: string
          example: "sample@mail.com"
          default: "sample@mail.com"
          description: Email of the user
        role:
          type: string
          example: "user"
          default: "user"
          description: Role of the user (user/admin)
        department:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
          default: "123e4567-e89b-12d3-a456-426614174000"
          description: Department ID
          required: true
        full_name:
          type: string
          example: "John Doe"
          default: "John Doe"
          description: Full Name of the user
        phone:
          type: string
          example: "1234567890"
          default: "1234567890"
          description: Phone number of the user
        district_id:
          type: string
          example: "123"
          default: "123"
          description: District ID of the user
        district_name_en:
          type: string
          example: "Raipur"
          default: "Raipur"
          description: District Name in English
        district_name_hi:
          type: string
          example: "रायपुर"
          default: "रायपुर"
          description: District Name in Hindi
