{
    "info": {
        "_postman_id": "civic-sphere-api-collection",
        "name": "üèõÔ∏è Civic Sphere API",
        "description": "A comprehensive Node.js + Express API for managing civic infrastructure including departments, users, and districts with role-based access control and Swagger SDK integration.\n\n## üöÄ Features\n- Secure authentication with JWT tokens\n- Role-based access control (Super Admin, Admin, User)\n- Comprehensive department management\n- User onboarding processes\n- Password reset functionality with OTP\n- Dashboard analytics\n- Built with TypeScript, PostgreSQL, and Drizzle ORM\n\n## üîê Authentication\nAll protected endpoints require a valid JWT token in the Authorization header:\n`Authorization: Bearer <your-jwt-token>`\n\n## üë• User Roles\n- **Super Admin**: Full access to all departments and users\n- **Admin**: Manage their own department and users within it\n- **User**: Limited access to their own information\n\n## üìö API Documentation\n- Swagger UI: `/api-docs`\n- OpenAPI Spec: `/api-json`\n\n## üõ†Ô∏è Development\n- **Local**: http://localhost:3001\n- **Dev**: Check environment variables\n- **Production**: Production URL\n\n## üìù Usage Instructions\n1. Import this collection into Postman\n2. Set up environment variables\n3. Use the 'Login' request with district name and password to get a JWT token\n4. Copy the token to the 'authToken' environment variable\n5. All subsequent requests will automatically use the token",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "civic-sphere-api"
    },
    "item": [
        {
            "name": "üîê Authentication",
            "item": [
                {
                    "name": "Login",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Test login response",
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has required fields\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData).to.have.property('token');",
                                    "    pm.expect(jsonData).to.have.property('user');",
                                    "});",
                                    "",
                                    "pm.test(\"Token is properly stored in collection variables\", function () {",
                                    "    const storedToken = pm.collectionVariables.get('authToken');",
                                    "    pm.expect(storedToken).to.not.be.undefined;",
                                    "    pm.expect(storedToken).to.not.be.empty;",
                                    "    pm.expect(storedToken.length).to.be.greaterThan(10);",
                                    "    console.log('Token stored successfully, length:', storedToken.length);",
                                    "});",
                                    "",
                                    "// Store JWT token in collection variable",
                                    "if (pm.response.code === 200) {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.token) {",
                                    "        pm.collectionVariables.set('authToken', jsonData.token);",
                                    "        console.log('JWT token stored successfully:', jsonData.token);",
                                    "        console.log('Token length:', jsonData.token.length);",
                                    "    } else {",
                                    "        console.error('No token found in response');",
                                    "    }",
                                    "} else {",
                                    "    console.error('Login failed with status:', pm.response.code);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"district_name_en\": \"{{districtNameEn}}\",\n    \"pass\": \"{{password}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "login"
                            ]
                        },
                        "description": "Authenticate user using district name and password to receive JWT token for API access.\n\n**Required Fields:**\n- `district_name_en`: District name in English (e.g., 'Raipur')\n- `pass`: User's password\n\n**Response:**\n- `message`: Login status message\n- `token`: JWT token for authentication\n- `user`: User object with details\n\n**Note:** Store the returned token for subsequent API calls. Users are identified by their district, not email."
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"district_name_en\": \"Raipur\",\n    \"pass\": \"password123\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/login",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "login"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"logged in\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAiLCJyb2xlIjoidXNlciIsImlhdCI6MTcwMzAwMDAwMCwiZXhwIjoxNzAzMDg2NDAwfQ.example_signature\",\n    \"user\": {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"admin@example.com\",\n        \"phone\": \"1234567890\",\n        \"role\": \"admin\",\n        \"department\": {\n            \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n            \"name\": \"Raipur Department\",\n            \"email\": \"raipur@example.com\",\n            \"city\": \"Raipur\",\n            \"state\": \"Chhattisgarh\"\n        },\n        \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n        \"district_id\": \"123\",\n        \"district_name_en\": \"Raipur\",\n        \"district_name_hi\": \"‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞\"\n    }\n}"
                        },
                        {
                            "name": "Error Response - Invalid Credentials",
                            "originalRequest": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"district_name_en\": \"WrongDistrict\",\n    \"pass\": \"wrongpassword\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/login",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "login"
                                    ]
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Invalid Credentials\",\n    \"name\": \"BadRequestError\"\n}"
                        }
                    ]
                }
            ],
            "description": "Authentication endpoints for user login and access control."
        },
        {
            "name": "üë• User Management",
            "item": [
                {
                    "name": "Get All Users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has users array\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('users');",
                                    "    pm.expect(jsonData.payload).to.have.property('total');",
                                    "});",
                                    "",
                                    "pm.test(\"Authorization header was sent correctly\", function () {",
                                    "    const authHeader = pm.request.headers.get('Authorization');",
                                    "    pm.expect(authHeader).to.include('Bearer');",
                                    "    pm.expect(authHeader).to.not.equal('Bearer ');",
                                    "    console.log('Authorization header sent:', authHeader);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users?skip=0&limit=10&search=&sortBy=createdAt&sortOrder=desc",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users"
                            ],
                            "query": [
                                {
                                    "key": "skip",
                                    "value": "0",
                                    "description": "Number of items to skip"
                                },
                                {
                                    "key": "limit",
                                    "value": "10",
                                    "description": "Number of items to return"
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Search query"
                                },
                                {
                                    "key": "sortBy",
                                    "value": "createdAt",
                                    "description": "Field to sort by"
                                },
                                {
                                    "key": "sortOrder",
                                    "value": "desc",
                                    "description": "Sort order (asc/desc)"
                                }
                            ]
                        },
                        "description": "Retrieve a paginated list of users with optional filtering and sorting.\n\n**Query Parameters:**\n- `skip`: Number of items to skip (default: 0)\n- `limit`: Number of items to return (default: 10)\n- `search`: Search query for filtering users\n- `sortBy`: Field to sort by (default: createdAt)\n- `sortOrder`: Sort order - 'asc' or 'desc' (default: asc)\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/users?skip=0&limit=10&search=&sortBy=createdAt&sortOrder=desc",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users"
                                    ],
                                    "query": [
                                        {
                                            "key": "skip",
                                            "value": "0"
                                        },
                                        {
                                            "key": "limit",
                                            "value": "10"
                                        },
                                        {
                                            "key": "search",
                                            "value": ""
                                        },
                                        {
                                            "key": "sortBy",
                                            "value": "createdAt"
                                        },
                                        {
                                            "key": "sortOrder",
                                            "value": "desc"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"users fetched successfully\",\n    \"payload\": {\n        \"users\": [\n            {\n                \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n                \"full_name\": \"John Doe\",\n                \"email\": \"john@example.com\",\n                \"phone\": \"1234567890\",\n                \"role\": \"admin\",\n                \"department\": {\n                    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n                    \"name\": \"Raipur Department\",\n                    \"email\": \"raipur@example.com\",\n                    \"city\": \"Raipur\",\n                    \"state\": \"Chhattisgarh\"\n                },\n                \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n                \"district_id\": \"123\",\n                \"district_name_en\": \"Raipur\",\n                \"district_name_hi\": \"‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞\"\n            },\n            {\n                \"id\": \"456e7890-e89b-12d3-a456-426614174000\",\n                \"full_name\": \"Jane Smith\",\n                \"email\": \"jane@example.com\",\n                \"phone\": \"9876543210\",\n                \"role\": \"user\",\n                \"department\": {\n                    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n                    \"name\": \"Raipur Department\",\n                    \"email\": \"raipur@example.com\",\n                    \"city\": \"Raipur\",\n                    \"state\": \"Chhattisgarh\"\n                },\n                \"createdAt\": \"2024-01-02T00:00:00.000Z\",\n                \"district_id\": \"123\",\n                \"district_name_en\": \"Raipur\",\n                \"district_name_hi\": \"‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞\"\n            }\n        ],\n        \"total\": 2\n    }\n}"
                        },
                        {
                            "name": "Error Response - Unauthorized",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users?skip=0&limit=10",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users"
                                    ],
                                    "query": [
                                        {
                                            "key": "skip",
                                            "value": "0"
                                        },
                                        {
                                            "key": "limit",
                                            "value": "10"
                                        }
                                    ]
                                }
                            },
                            "status": "Unauthorized",
                            "code": 401,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Access token is missing or invalid\",\n    \"error\": \"UnauthorizedError\",\n    \"details\": \"Please provide a valid JWT token in the Authorization header\"\n}"
                        }
                    ]
                },
                {
                    "name": "Get User by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has user data\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('id');",
                                    "    pm.expect(jsonData.payload).to.have.property('email');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{userId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "{{userId}}"
                            ]
                        },
                        "description": "Retrieve detailed information about a specific user by their ID.\n\n**Path Parameters:**\n- `uid`: Unique identifier of the user\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only\n\n**Response includes:**\n- User profile information\n- Role and permissions\n- Department details\n- District information"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/users/123e4567-e89b-12d3-a456-426614174000",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "123e4567-e89b-12d3-a456-426614174000"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"User fetched successfully\",\n    \"payload\": {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"john@example.com\",\n        \"phone\": \"1234567890\",\n        \"role\": \"admin\",\n        \"department\": {\n            \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n            \"name\": \"Raipur Department\",\n            \"email\": \"raipur@example.com\",\n            \"city\": \"Raipur\",\n            \"state\": \"Chhattisgarh\"\n        },\n        \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n        \"district_id\": \"123\",\n        \"district_name_en\": \"Raipur\",\n        \"district_name_hi\": \"‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞\"\n    }\n}"
                        },
                        {
                            "name": "Error Response - User Not Found",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/users/nonexistent-user-id",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "nonexistent-user-id"
                                    ]
                                }
                            },
                            "status": "Not Found",
                            "code": 404,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"User not found\",\n    \"error\": \"NotFoundError\",\n    \"details\": \"The requested user does not exist in the system\"\n}"
                        }
                    ]
                },
                {
                    "name": "Add New User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User created successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "    pm.expect(jsonData.payload).to.have.property('id');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"role\": \"user\",\n    \"department\": \"{{departmentId}}\",\n    \"pass\": \"{{newUserPassword}}\",\n    \"district_id\": {{districtId}},\n    \"district_name_en\": \"{{districtNameEn}}\",\n    \"district_name_hi\": \"{{districtNameHi}}\",\n    \"full_name\": \"{{newUserName}}\",\n    \"email\": \"{{newUserEmail}}\",\n    \"phone\": \"{{newUserPhone}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/add",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "add"
                            ]
                        },
                        "description": "Create a new user account with specified role and department assignment.\n\n**Required Fields:**\n- `role`: User role (user/admin)\n- `department`: Department ID\n- `pass`: User password (8-20 characters)\n- `district_id`: District identifier (integer)\n- `district_name_en`: District name in English\n- `district_name_hi`: District name in Hindi\n\n**Optional Fields:**\n- `full_name`: User's full name\n- `email`: User's email address\n- `phone`: User's phone number\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"role\": \"user\",\n    \"department\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"pass\": \"newpassword123\",\n    \"district_id\": 123,\n    \"district_name_en\": \"Raipur\",\n    \"district_name_hi\": \"‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞\",\n    \"full_name\": \"New User\",\n    \"email\": \"newuser@example.com\",\n    \"phone\": \"9876543210\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/add",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "add"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"User added successfully\",\n    \"payload\": {\n        \"id\": \"789e0123-e89b-12d3-a456-426614174000\",\n        \"full_name\": \"New User\",\n        \"email\": \"newuser@example.com\",\n        \"phone\": \"9876543210\",\n        \"role\": \"user\",\n        \"department\": {\n            \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n            \"name\": \"Raipur Department\",\n            \"email\": \"raipur@example.com\",\n            \"city\": \"Raipur\",\n            \"state\": \"Chhattisgarh\"\n        },\n        \"createdAt\": \"2024-01-03T00:00:00.000Z\",\n        \"district_id\": \"123\",\n        \"district_name_en\": \"Raipur\",\n        \"district_name_hi\": \"‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞\"\n    }\n}"
                        },
                        {
                            "name": "Error Response - Validation Error",
                            "originalRequest": {
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"email\": \"invalid-email\",\n    \"role\": \"invalid-role\",\n    \"department\": \"invalid-department-id\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/add",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "users",
                                        "add"
                                    ]
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Validation failed\",\n    \"name\": \"BadRequestError\"\n}"
                        }
                    ]
                },
                {
                    "name": "Update User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User updated successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{updatedUserEmail}}\",\n    \"role\": \"{{updatedUserRole}}\",\n    \"department\": \"{{departmentId}}\",\n    \"full_name\": \"{{updatedUserName}}\",\n    \"phone\": \"{{updatedUserPhone}}\",\n    \"district_id\": \"{{districtId}}\",\n    \"district_name_en\": \"{{districtNameEn}}\",\n    \"district_name_hi\": \"{{districtNameHi}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/{{userId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "{{userId}}"
                            ]
                        },
                        "description": "Update an existing user's information and role assignments.\n\n**Path Parameters:**\n- `uid`: Unique identifier of the user to update\n\n**Updateable Fields:**\n- `email`: User's email address\n- `role`: User role (user/admin)\n- `department`: Department ID\n- `full_name`: User's full name\n- `phone`: User's phone number\n- `district_id`: District identifier\n- `district_name_en`: District name in English\n- `district_name_hi`: District name in Hindi\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only"
                    },
                    "response": []
                },
                {
                    "name": "Delete User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User deleted successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{userId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "{{userId}}"
                            ]
                        },
                        "description": "Permanently delete a user account from the system.\n\n**Path Parameters:**\n- `uid`: Unique identifier of the user to delete\n\n**‚ö†Ô∏è Warning:** This action is irreversible and will permanently remove the user and all associated data.\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only"
                    },
                    "response": []
                }
            ],
            "description": "Complete user management operations including CRUD operations with role-based access control."
        },
        {
            "name": "üè¢ Department Management",
            "item": [
                {
                    "name": "Get All Departments",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has departments array\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('departments');",
                                    "    pm.expect(jsonData.payload).to.have.property('total');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/departments?skip=0&limit=10&search=&sortBy=createdAt&sortOrder=desc",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "departments"
                            ],
                            "query": [
                                {
                                    "key": "skip",
                                    "value": "0",
                                    "description": "Number of items to skip"
                                },
                                {
                                    "key": "limit",
                                    "value": "10",
                                    "description": "Number of items to return"
                                },
                                {
                                    "key": "search",
                                    "value": "",
                                    "description": "Search query"
                                },
                                {
                                    "key": "sortBy",
                                    "value": "createdAt",
                                    "description": "Field to sort by"
                                },
                                {
                                    "key": "sortOrder",
                                    "value": "desc",
                                    "description": "Sort order (asc/desc)"
                                }
                            ]
                        },
                        "description": "Retrieve a paginated list of departments with optional filtering and sorting.\n\n**Query Parameters:**\n- `skip`: Number of items to skip (default: 0)\n- `limit`: Number of items to return (default: 10)\n- `search`: Search query for filtering departments\n- `sortBy`: Field to sort by (default: createdAt)\n- `sortOrder`: Sort order - 'asc' or 'desc' (default: asc)\n\n**Note:** Regular users will only see their assigned department, while admins and super admins see all departments.\n\n**Authentication:** Requires valid JWT token"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/departments?skip=0&limit=10&search=&sortBy=createdAt&sortOrder=desc",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "departments"
                                    ],
                                    "query": [
                                        {
                                            "key": "skip",
                                            "value": "0"
                                        },
                                        {
                                            "key": "limit",
                                            "value": "10"
                                        },
                                        {
                                            "key": "search",
                                            "value": ""
                                        },
                                        {
                                            "key": "sortBy",
                                            "value": "createdAt"
                                        },
                                        {
                                            "key": "sortOrder",
                                            "value": "desc"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Departments fetched successfully\",\n    \"payload\": {\n        \"departments\": [\n            {\n                \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n                \"name\": \"Raipur Department\",\n                \"email\": \"raipur@example.com\",\n                \"city\": \"Raipur\",\n                \"state\": \"Chhattisgarh\",\n                \"createdAt\": \"2024-01-01T00:00:00.000Z\"\n            },\n            {\n                \"id\": \"456e7890-e89b-12d3-a456-426614174000\",\n                \"name\": \"Bilaspur Department\",\n                \"email\": \"bilaspur@example.com\",\n                \"city\": \"Bilaspur\",\n                \"state\": \"Chhattisgarh\",\n                \"createdAt\": \"2024-01-02T00:00:00.000Z\"\n            },\n            {\n                \"id\": \"789e0123-e89b-12d3-a456-426614174000\",\n                \"name\": \"Durg Department\",\n                \"email\": \"durg@example.com\",\n                \"city\": \"Durg\",\n                \"state\": \"Chhattisgarh\",\n                \"createdAt\": \"2024-01-03T00:00:00.000Z\"\n            }\n        ],\n        \"total\": 3\n    }\n}"
                        },
                        {
                            "name": "Success Response - Single Department (Regular User)",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/departments?skip=0&limit=10",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "departments"
                                    ],
                                    "query": [
                                        {
                                            "key": "skip",
                                            "value": "0"
                                        },
                                        {
                                            "key": "limit",
                                            "value": "10"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Departments fetched successfully\",\n    \"payload\": {\n        \"departments\": [\n            {\n                \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n                \"name\": \"Raipur Department\",\n                \"email\": \"raipur@example.com\",\n                \"city\": \"Raipur\",\n                \"state\": \"Chhattisgarh\",\n                \"createdAt\": \"2024-01-01T00:00:00.000Z\"\n            }\n        ],\n        \"total\": 1\n    }\n}"
                        }
                    ]
                },
                {
                    "name": "Get Department by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has department data\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('id');",
                                    "    pm.expect(jsonData.payload).to.have.property('name');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/departments/{{departmentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "departments",
                                "{{departmentId}}"
                            ]
                        },
                        "description": "Retrieve detailed information about a specific department by its ID.\n\n**Path Parameters:**\n- `id`: Unique identifier of the department\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only\n\n**Response includes:**\n- Department basic information\n- Location details (city, state)\n- Contact information (email)\n- Creation timestamp"
                    },
                    "response": []
                },
                {
                    "name": "Add New Department",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Department created successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "    pm.expect(jsonData.payload).to.have.property('id');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"{{departmentName}}\",\n    \"email\": \"{{departmentEmail}}\",\n    \"city\": \"{{departmentCity}}\",\n    \"state\": \"{{departmentState}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/departments/add",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "departments",
                                "add"
                            ]
                        },
                        "description": "Create a new department with specified location and contact information.\n\n**Required Fields:**\n- `name`: Department name (4-30 characters)\n- `email`: Department email address (valid email format)\n- `city`: City where department is located (4-30 characters)\n- `state`: State where department is located (4-30 characters)\n\n**Authentication:** Requires valid JWT token\n**Access:** Super Admin role only\n\n**Note:** Departments are the organizational units that users belong to."
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"name\": \"New Department\",\n    \"email\": \"newdept@example.com\",\n    \"city\": \"New City\",\n    \"state\": \"New State\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/departments/add",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "departments",
                                        "add"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Department added successfully\",\n    \"payload\": {\n        \"id\": \"abc12345-e89b-12d3-a456-426614174000\",\n        \"name\": \"New Department\",\n        \"email\": \"newdept@example.com\",\n        \"city\": \"New City\",\n        \"state\": \"New State\",\n        \"createdAt\": \"2024-01-04T00:00:00.000Z\"\n    }\n}"
                        },
                        {
                            "name": "Error Response - Insufficient Permissions",
                            "originalRequest": {
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    },
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"name\": \"New Department\",\n    \"email\": \"newdept@example.com\",\n    \"city\": \"New City\",\n    \"state\": \"New State\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/departments/add",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "departments",
                                        "add"
                                    ]
                                }
                            },
                            "status": "Forbidden",
                            "code": 403,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Insufficient permissions\",\n    \"error\": \"ForbiddenError\",\n    \"details\": \"Only Super Admin users can create new departments\"\n}"
                        }
                    ]
                },
                {
                    "name": "Update Department",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Department updated successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"{{updatedDepartmentName}}\",\n    \"email\": \"{{updatedDepartmentEmail}}\",\n    \"city\": \"{{updatedDepartmentCity}}\",\n    \"state\": \"{{updatedDepartmentState}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/departments/{{departmentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "departments",
                                "{{departmentId}}"
                            ]
                        },
                        "description": "Update an existing department's information and location details.\n\n**Path Parameters:**\n- `id`: Unique identifier of the department to update\n\n**Updateable Fields:**\n- `name`: Department name\n- `email`: Department email address\n- `city`: City where department is located\n- `state`: State where department is located\n\n**Authentication:** Requires valid JWT token\n**Access:** Super Admin role only"
                    },
                    "response": []
                },
                {
                    "name": "Delete Department",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Department deleted successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/departments/{{departmentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "departments",
                                "{{departmentId}}"
                            ]
                        },
                        "description": "Permanently delete a department from the system.\n\n**Path Parameters:**\n- `id`: Unique identifier of the department to delete\n\n**‚ö†Ô∏è Warning:** This action is irreversible and will permanently remove the department and all associated users.\n\n**Authentication:** Requires valid JWT token\n**Access:** Super Admin role only"
                    },
                    "response": []
                }
            ],
            "description": "Department management operations for civic organizations with role-based access control."
        },
        {
            "name": "üìä Dashboard Analytics",
            "item": [
                {
                    "name": "Get Dashboard Summary",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has dashboard data\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('totalDepartments');",
                                    "    pm.expect(jsonData.payload).to.have.property('totalUsers');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/dashboard/summary",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "dashboard",
                                "summary"
                            ]
                        },
                        "description": "Retrieve comprehensive dashboard analytics and summary statistics.\n\n**Response includes:**\n- Total number of departments\n- Total number of users\n- System overview metrics\n\n**Authentication:** Requires valid JWT token\n**Access:** Admin and Super Admin roles only\n\n**Use case:** Business intelligence and civic management insights for administrators."
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/dashboard/summary",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "dashboard",
                                        "summary"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Summary fetched successfully\",\n    \"payload\": {\n        \"totalDepartments\": 5,\n        \"totalUsers\": 150,\n        \"activeUsers\": 142,\n        \"inactiveUsers\": 8,\n        \"departmentsByState\": {\n            \"Chhattisgarh\": 3,\n            \"Madhya Pradesh\": 1,\n            \"Jharkhand\": 1\n        },\n        \"usersByRole\": {\n            \"super_admin\": 2,\n            \"admin\": 15,\n            \"user\": 133\n        },\n        \"lastUpdated\": \"2024-01-04T12:00:00.000Z\"\n    }\n}"
                        },
                        {
                            "name": "Success Response - Empty System",
                            "originalRequest": {
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Authorization",
                                        "value": "Bearer {{authToken}}"
                                    }
                                ],
                                "url": {
                                    "raw": "{{baseUrl}}/dashboard/summary",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "dashboard",
                                        "summary"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Summary fetched successfully\",\n    \"payload\": {\n        \"totalDepartments\": 0,\n        \"totalUsers\": 0,\n        \"activeUsers\": 0,\n        \"inactiveUsers\": 0,\n        \"departmentsByState\": {},\n        \"usersByRole\": {},\n        \"lastUpdated\": \"2024-01-01T00:00:00.000Z\"\n    }\n}"
                        }
                    ]
                }
            ],
            "description": "Analytics and reporting endpoints for business intelligence and civic management insights."
        },
        {
            "name": "üîë Password Reset",
            "item": [
                {
                    "name": "Generate OTP",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"OTP generated successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('request_id');",
                                    "    pm.expect(jsonData.payload).to.have.property('email');",
                                    "});",
                                    "",
                                    "// Store request_id for OTP verification",
                                    "if (pm.response.code === 200) {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.payload.request_id) {",
                                    "        pm.environment.set('resetRequestId', jsonData.payload.request_id);",
                                    "        console.log('Reset request ID stored for OTP verification');",
                                    "    }",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{userEmail}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/resetPassword/generateOtp",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "resetPassword",
                                "generateOtp"
                            ]
                        },
                        "description": "Generate a one-time password (OTP) for password reset functionality.\n\n**Required Fields:**\n- `email`: User's email address for OTP delivery\n\n**Response:**\n- `request_id`: Unique identifier for OTP verification\n- `email`: Confirmation of email address\n\n**Note:** The OTP will be sent to the specified email address. Store the request_id for subsequent verification steps."
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"email\": \"user@example.com\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/resetPassword/generateOtp",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "resetPassword",
                                        "generateOtp"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"OTP sent successfully\",\n    \"payload\": {\n        \"email\": \"user@example.com\",\n        \"request_id\": \"reset_123e4567-e89b-12d3-a456-426614174000\",\n        \"expires_at\": \"2024-01-04T12:15:00.000Z\",\n        \"message\": \"A 6-digit OTP has been sent to your email address\"\n    }\n}"
                        },
                        {
                            "name": "Error Response - User Not Found",
                            "originalRequest": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"email\": \"nonexistent@example.com\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/resetPassword/generateOtp",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "resetPassword",
                                        "generateOtp"
                                    ]
                                }
                            },
                            "status": "Not Found",
                            "code": 404,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"User not found\",\n    \"error\": \"NotFoundError\",\n    \"details\": \"No user found with the provided email address\"\n}"
                        }
                    ]
                },
                {
                    "name": "Verify OTP",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"OTP verified successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.payload).to.have.property('request_id');",
                                    "    pm.expect(jsonData.payload).to.have.property('email');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"otp\": \"{{otpCode}}\",\n    \"request_id\": \"{{resetRequestId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/resetPassword/verifyOtp",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "resetPassword",
                                "verifyOtp"
                            ]
                        },
                        "description": "Verify the OTP code sent to the user's email for password reset.\n\n**Required Fields:**\n- `email`: User's email address\n- `otp`: 6-digit OTP code received via email\n- `request_id`: Request identifier from OTP generation\n\n**Response:**\n- `request_id`: Validated request identifier for password reset\n- `email`: Confirmation of email address\n\n**Note:** Use the returned request_id for the final password reset step."
                    },
                    "response": []
                },
                {
                    "name": "Reset Password",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Password reset successfully\", function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('successfully');",
                                    "    pm.expect(jsonData.payload).to.be.true;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"request_id\": \"{{resetRequestId}}\",\n    \"password\": \"{{newPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/resetPassword",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "resetPassword"
                            ]
                        },
                        "description": "Set a new password after successful OTP verification.\n\n**Required Fields:**\n- `request_id`: Validated request identifier from OTP verification\n- `password`: New password (8-20 characters)\n\n**Password Requirements:**\n- Minimum length: 8 characters\n- Maximum length: 20 characters\n- Should include alphanumeric characters\n\n**Note:** This is the final step in the password reset process. The new password will be immediately active."
                    },
                    "response": []
                }
            ],
            "description": "Password reset functionality using OTP verification for enhanced security."
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Pre-request script for common setup",
                    "console.log('Request to:', pm.request.url);",
                    "",
                    "// Check if auth token exists for protected endpoints",
                    "if (pm.request.headers.has('Authorization')) {",
                    "    const authToken = pm.collectionVariables.get('authToken');",
                    "    if (!authToken) {",
                    "        console.warn('Warning: Authorization header present but no auth token found in collection variables');",
                    "        console.warn('Available collection variables:', Object.keys(pm.collectionVariables.toObject()));",
                    "    } else {",
                    "        console.log('Using auth token:', authToken.substring(0, 20) + '...');",
                    "        console.log('Full Authorization header:', pm.request.headers.get('Authorization'));",
                    "    }",
                    "}",
                    "",
                    "// Debug: Log all collection variables",
                    "console.log('All collection variables:', pm.collectionVariables.toObject());"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script for common validations",
                    "pm.test(\"Response time is less than 5000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test(\"Response has valid JSON\", function () {",
                    "    pm.response.to.be.json;",
                    "});",
                    "",
                    "// Log response for debugging",
                    "console.log('Response Status:', pm.response.status);",
                    "console.log('Response Time:', pm.response.responseTime + 'ms');",
                    "",
                    "// Check auth token status for debugging",
                    "const authToken = pm.collectionVariables.get('authToken');",
                    "if (authToken) {",
                    "    console.log('Auth token available, length:', authToken.length);",
                    "} else {",
                    "    console.log('No auth token found in collection variables');",
                    "}"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3001",
            "type": "string",
            "description": "Base URL for the API server (default port: 3001)"
        },
        {
            "key": "authToken",
            "value": "",
            "type": "string",
            "description": "JWT authentication token (automatically set after login)"
        },
        {
            "key": "districtNameEn",
            "value": "Raipur",
            "type": "string",
            "description": "District name in English for authentication"
        },
        {
            "key": "password",
            "value": "password123",
            "type": "string",
            "description": "User password for authentication"
        },
        {
            "key": "userId",
            "value": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string",
            "description": "Sample user ID for testing"
        },
        {
            "key": "departmentId",
            "value": "123e4567-e89b-12d3-a456-426614174000",
            "type": "string",
            "description": "Sample department ID for testing"
        },
        {
            "key": "districtId",
            "value": "123",
            "type": "integer",
            "description": "Sample district ID for testing (integer)"
        },
        {
            "key": "districtNameEn",
            "value": "Raipur",
            "type": "string",
            "description": "Sample district name in English"
        },
        {
            "key": "districtNameHi",
            "value": "‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞",
            "type": "string",
            "description": "Sample district name in Hindi"
        },
        {
            "key": "newUserEmail",
            "value": "newuser@example.com",
            "type": "string",
            "description": "Email for new user creation"
        },
        {
            "key": "newUserPassword",
            "value": "newpassword123",
            "type": "string",
            "description": "Password for new user creation"
        },
        {
            "key": "newUserName",
            "value": "New User",
            "type": "string",
            "description": "Name for new user creation"
        },
        {
            "key": "newUserPhone",
            "value": "9876543210",
            "type": "string",
            "description": "Phone for new user creation"
        },
        {
            "key": "departmentName",
            "value": "New Department",
            "type": "string",
            "description": "Name for new department creation"
        },
        {
            "key": "departmentEmail",
            "value": "dept@example.com",
            "type": "string",
            "description": "Email for new department creation"
        },
        {
            "key": "departmentCity",
            "value": "New City",
            "type": "string",
            "description": "City for new department creation"
        },
        {
            "key": "departmentState",
            "value": "New State",
            "type": "string",
            "description": "State for new department creation"
        },
        {
            "key": "userEmail",
            "value": "user@example.com",
            "type": "string",
            "description": "Email for password reset operations"
        },
        {
            "key": "otpCode",
            "value": "123456",
            "type": "string",
            "description": "6-digit OTP code for verification"
        },
        {
            "key": "newPassword",
            "value": "newpassword123",
            "type": "string",
            "description": "New password for reset operations"
        },
        {
            "key": "resetRequestId",
            "value": "",
            "type": "string",
            "description": "Request ID for password reset operations (auto-set)"
        }
    ]
}